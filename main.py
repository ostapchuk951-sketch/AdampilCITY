import os
import asyncio
import json
import logging
from threading import Thread
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –õ–û–ì–Ü–í ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ö–û–ù–°–¢–ê–ù–¢–ò ===
TOKEN = os.getenv("BOT_TOKEN")
USERS_FILE = "users.json"
PORT = int(os.environ.get('PORT', 10000))

# Flask-–¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")


# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def calculate_water(weight_kg: float) -> float:
    return round(weight_kg * 30 / 1000, 2)


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! üíß\n–í–∫–∞–∂–∏ —Å–≤—ñ–π —Ä—ñ—Å—Ç —ñ –≤–∞–≥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 175 70 (—Ä—ñ—Å—Ç —Å–º, –≤–∞–≥–∞ –∫–≥)")

async def handle_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    parts = text.split()
    if len(parts) != 2 or not all(p.replace('.', '', 1).isdigit() for p in parts):
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: 175 70")
        return
    height, weight = map(float, parts)
    water = calculate_water(weight)
    context.user_data['water'] = water
    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫"], ["–ù—ñ"]], resize_keyboard=True)
    await update.message.reply_text(f"–¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Ç–∏ –±–ª–∏–∑—å–∫–æ {water} –ª –≤–æ–¥–∏ –Ω–∞ –¥–µ–Ω—å. üí¶\n–ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –≤–æ–¥—É?", reply_markup=reply_markup)

async def handle_reminder_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_users()
    choice = update.message.text.lower()
    if choice == "—Ç–∞–∫":
        users[user_id] = {
            "chat_id": update.effective_chat.id,
            "reminder": True,
            "water": context.user_data.get('water', 2.0)
        }
        save_users(users)
        await update.message.reply_text("–î–æ–±—Ä–µ! –Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É üíß")
    elif choice == "–Ω—ñ":
        if user_id in users:
            users[user_id]["reminder"] = False
        else:
            users[user_id] = {"reminder": False}
        save_users(users)
        await update.message.reply_text("–ì–∞—Ä–∞–∑–¥! –ë–µ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ‚òÄÔ∏è")


# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ---
async def send_reminder(application: Application):
    """–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–æ–º –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å."""
    logger.info("–ó–∞–ø—É—Å–∫ —â–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è...")
    users = load_users()
    if not users:
        return

    for user_id, data in users.items():
        if data.get("reminder"):
            chat_id = data["chat_id"]
            water_amount = data.get("water", 2.0)
            try:
                await application.bot.send_message(
                    chat_id=chat_id,
                    text=f"üíß –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ù–µ –∑–∞–±—É–¥—å –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏. –¢–≤–æ—è –Ω–æ—Ä–º–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {water_amount} –ª."
                )
                logger.info(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")


# --- –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏, —â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –≤ –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö."""
    logger.error("Exception while handling an update:", exc_info=context.error)


# --- Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
@app.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ ---
async def run_bot():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not TOKEN:
        logger.error("–ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^(–¢–∞–∫|–ù—ñ)$"), handle_reminder_choice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_data))
    application.add_error_handler(error_handler)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    scheduler.add_job(
        send_reminder,
        CronTrigger(minute=0),  # –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ—ó –≥–æ–¥–∏–Ω–∏
        kwargs={'application': application},
        id="hourly_reminder",
        name="–©–æ–≥–æ–¥–∏–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–æ–¥—É",
        replace_existing=True,
    )
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    scheduler.start()
    logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ.")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling
    # –¶–µ –±–ª–æ–∫—É—é—á–∏–π –≤–∏–∫–ª–∏–∫, —è–∫–∏–π –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –¥–æ–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—É –Ω–µ –∑—É–ø–∏–Ω—è—Ç—å
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await application.run_polling(drop_pending_updates=True)


# ==============================================================================
# ======================== –û–°–¨ –ó–ú–Ü–ù–ò, –©–û –í–ò–†–Ü–®–£–Æ–¢–¨ –ü–†–û–ë–õ–ï–ú–£ ========================
# ==============================================================================
if __name__ == "__main__":
    # 1. –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫ –¥–ª—è Flask-—Å–µ—Ä–≤–µ—Ä–∞
    # –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± Render –≤–≤–∞–∂–∞–≤ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏–º —ñ –Ω–µ –≤–∏–º–∏–∫–∞–≤ –π–æ–≥–æ.
    # daemon=True –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ —Ü–µ–π –ø–æ—Ç—ñ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∫–æ–ª–∏ –∑—É–ø–∏–Ω–∏—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞.
    logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è heartbeat —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ...")
    flask_thread = Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': PORT})
    flask_thread.daemon = True
    flask_thread.start()

    # 2. –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –ì–û–õ–û–í–ù–û–ú–£ –ø–æ—Ç–æ—Ü—ñ
    # asyncio.run —Å—Ç–≤–æ—Ä—é—î event loop —Å–∞–º–µ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ,
    # —â–æ –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏ –∑—É–ø–∏–Ω–∫–∏ —ñ –≤–∏—Ä—ñ—à—É—î –≤–∞—à—É –ø–æ–º–∏–ª–∫—É.
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ...")
        asyncio.run(run_bot())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∞–±–æ —Å–∏—Å—Ç–µ–º–æ—é.")
