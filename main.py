import os
import asyncio
import json
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler


# === –ö–û–ù–°–¢–ê–ù–¢–ò ===
TOKEN = os.getenv("BOT_TOKEN")  # ‚ö†Ô∏è –¢–æ–∫–µ–Ω –ù–ï –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–ª—è—Ç–∏ –Ω–∞–ø—Ä—è–º—É!
USERS_FILE = "users.json"
app = Flask(__name__)
scheduler = AsyncIOScheduler()


# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


def calculate_water(weight_kg: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç—Ä–µ–±–∏ —É –≤–æ–¥—ñ: 30 –º–ª –Ω–∞ 1 –∫–≥ –≤–∞–≥–∏"""
    return round(weight_kg * 30 / 1000, 2)


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üíß\n–í–∫–∞–∂–∏ —Å–≤—ñ–π —Ä—ñ—Å—Ç —ñ –≤–∞–≥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: 175 70 (—Ä—ñ—Å—Ç —Å–º, –≤–∞–≥–∞ –∫–≥)"
    )


async def handle_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    parts = text.split()

    if len(parts) != 2 or not all(p.replace('.', '', 1).isdigit() for p in parts):
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: 175 70")
        return

    height, weight = map(float, parts)
    water = calculate_water(weight)

    context.user_data['water'] = water
    context.user_data['reminder'] = False

    reply_markup = ReplyKeyboardMarkup([["–¢–∞–∫"], ["–ù—ñ"]], resize_keyboard=True)

    await update.message.reply_text(
        f"–¢–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Ç–∏ –±–ª–∏–∑—å–∫–æ {water} –ª –≤–æ–¥–∏ –Ω–∞ –¥–µ–Ω—å. üí¶\n–ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –≤–æ–¥—É?",
        reply_markup=reply_markup
    )


async def handle_reminder_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_users()

    choice = update.message.text.lower()
    if choice == "—Ç–∞–∫":
        users[user_id] = {
            "chat_id": update.effective_chat.id,
            "reminder": True,
            "water": context.user_data.get('water', 2.0)
        }
        save_users(users)
        await update.message.reply_text("–î–æ–±—Ä–µ! –Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É üíß")
    elif choice == "–Ω—ñ":
        users[user_id] = {
            "chat_id": update.effective_chat.id,
            "reminder": False
        }
        save_users(users)
        await update.message.reply_text("–ì–∞—Ä–∞–∑–¥! –ë–µ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å ‚òÄÔ∏è")


# --- Flask endpoint (–¥–ª—è Render) ---
@app.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    app_telegram = (
        ApplicationBuilder()
        .token(TOKEN)
        .build()
    )

    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_data))
    app_telegram.add_handler(MessageHandler(filters.Regex("^(–¢–∞–∫|–ù—ñ)$"), handle_reminder_choice))

    scheduler.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π")

    await app_telegram.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
